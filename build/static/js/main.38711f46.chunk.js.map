{"version":3,"sources":["components/ToogleBtn/ToogleBtn.tsx","helper/index.tsx","components/WeatherNow/WeatherNow.tsx","services/index.tsx","components/SearchForm/SearchForm.tsx","components/WeatherMain/WeatherMain.tsx","components/Highlight/Highlight.tsx","components/WeatherList/WeatherList.tsx","components/WeatherDescr/WeatherDescr.tsx","components/Spinner/Spinner.tsx","components/Weather/Weather.tsx","components/App/App.tsx","index.tsx"],"names":["ToogleBtn","color","onToggleTemp","useState","celcius","fahrenheit","setActive","activeC","activeF","className","onClick","toogleTemp","value","prop","Math","round","convertMilliseconds","milles","option","date","Date","Intl","DateTimeFormat","weekday","format","day","month","filterHighlight","forecastWeather","highlight","list","filter","el","index","WeatherNow","currentWeather","temperature","onHandleForm","onHandleCoords","main","temp","src","weather","icon","alt","substr","length","description","dt","name","apiKeyWeather","fetchCurrentWeatherCoords","a","lat","lon","fetch","response","ok","Error","json","fetchForecastWeatherCoords","getCoordsByName","SearchForm","onClickItem","cities","setCities","placeholder","type","autoComplete","onChange","e","preventDefault","fetchData","currentTarget","features","OnChangeValue","map","properties","city","getCities","WeatherMain","form","setForm","Highlight","speed","style","transform","deg","humidity","width","gust","pressure","WeatherList","forecasts","onSetHighlight","slice","forecast","dayTemp","nightTemp","night","WeatherDescr","seHighlight","Spinner","Weather","isLoading","setLoading","setCurrentWeather","setForecastWeather","setTemperature","setColor","getCoords","useCallback","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","useEffect","sys","sunrise","sunset","toggleValue","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.38711f46.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './ToogleBtn.css';\r\n\r\ninterface ToogleBtnProps{\r\n    color: string\r\n    onToggleTemp: (toggleValue: string) => void,\r\n}\r\n\r\nconst ToogleBtn: React.FC<ToogleBtnProps> = ({color, onToggleTemp}) => {\r\n    const [{celcius, fahrenheit}, setActive] = useState<{celcius: boolean;fahrenheit: boolean;}>({celcius: true, fahrenheit: false});\r\n    \r\n    const activeC = {celcius: true, fahrenheit: false};\r\n    const activeF = {celcius: false, fahrenheit: true};\r\n\r\n    const setCelcius = () => {\r\n        setActive(activeC)\r\n        onToggleTemp('celcius')\r\n    }\r\n    \r\n    const setFahrenheit = () => {\r\n        setActive(activeF)\r\n        onToggleTemp('fahrenheit')\r\n    }\r\n    \r\n    return (\r\n        <div className=\"weather-toogle\">\r\n            <button className={`celcius ${celcius && 'active'} ${color}`} onClick={() => setCelcius()}>℃</button>\r\n            <button className={`fahrenheit ${fahrenheit && 'active'} ${color}`} onClick={() => setFahrenheit()}>℉</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport {ToogleBtn};","const toogleTemp = (value: number, prop: string): string => {\r\n    switch(prop) {\r\n        case 'celcius':\r\n            value = value - 273.15;\r\n            return `${Math.round(value)}℃`;\r\n        case 'fahrenheit':\r\n            value = ((value - 273.15) * 1.8) + 32;\r\n            return `${Math.round(value)}℉`;\r\n        default: \r\n            return `${Math.round(value)}℃`;\r\n    }\r\n}\r\n\r\nconst convertMilliseconds = (milles: number, option: string = 'short') => {\r\n    const date = new Date(+`${milles}000`);\r\n\r\n    if(option === 'long') {\r\n        return new Intl.DateTimeFormat('en-US', {\r\n            weekday: 'long'\r\n        }).format(date);  \r\n    }\r\n\r\n    return new Intl.DateTimeFormat('en-US', {\r\n                weekday: 'short', day: 'numeric', month: 'short',\r\n    }).format(date);\r\n}\r\n\r\nconst filterHighlight = (forecastWeather: any,highlight: number): any => {\r\n    return forecastWeather?.list.filter((el: any, index: number ) => index === highlight);\r\n}\r\n\r\nexport {\r\n    filterHighlight,\r\n    toogleTemp,\r\n    convertMilliseconds\r\n}","import React from 'react';\r\nimport { toogleTemp, convertMilliseconds } from '../../helper';\r\nimport './WeatherNow.css';\r\n\r\ninterface IWeatherMain{\r\n    currentWeather: any,\r\n    temperature: string,\r\n    color: string\r\n    onHandleForm: () => void,\r\n    onHandleCoords: () => void\r\n}\r\n\r\nconst WeatherNow: React.FC<IWeatherMain> = ({currentWeather, temperature, color, onHandleForm, onHandleCoords}) => {\r\n\r\n    let value = toogleTemp(currentWeather.main.temp, temperature);\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"navigation\">\r\n                <button className={`navigation-search ${color}`} onClick={() => onHandleForm()}>Search for places</button>\r\n                <button className={`navigation-geo ${color}`} onClick={() => onHandleCoords()}><i className=\"fas fa-location\"></i></button>\r\n            </div>\r\n            <div className=\"weather-forecast\">\r\n                <img src={`images/${currentWeather?.weather[0]?.icon}.svg`} alt=\"weather-forecast\" className=\"forecast-center\"/>\r\n            </div>\r\n            <div className={`weather-header ${color}`}>{value.substr(0,value.length - 1)}\r\n                <span>{value.substr(value.length - 1)}</span>\r\n            </div>\r\n            <div className={`weather-subheader ${color}`}>{currentWeather?.weather[0]?.description}</div>\r\n            <div className={`weather-date ${color}`}>\r\n                <span>Today</span>\r\n                <span className=\"dot\">•</span>\r\n                <span>{convertMilliseconds(currentWeather?.dt)}</span>\r\n            </div>\r\n            <div className={`weather-place ${color}`}>\r\n                <i className=\"fas fa-map-marker\"></i>\r\n                {currentWeather?.name}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport { WeatherNow };","\r\nconst apiKeyWeather = 'd701466e6f81830ea1596b7e2038a077';\r\nconst apiKeyPosition = 'fbc13c10bd85447d8b05a6fd4f167c9a';\r\n\r\nconst fetchCurrentWeatherCoords = async ({lat, lon}: {lat: number | null,lon: number | null}) => {\r\n    const response = await fetch(`http://pro.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKeyWeather}`)\r\n    \r\n    if(!response.ok) {\r\n        throw new Error('Response is not correct to openweather API');\r\n    }\r\n    \r\n    return await response.json();\r\n}\r\n\r\nconst fetchForecastWeatherCoords = async ({lat, lon}: {lat: number | null,lon: number | null}) => {\r\n    const response = await fetch(`http://pro.openweathermap.org/data/2.5/forecast/daily?lat=${lat}&lon=${lon}&appid=${apiKeyWeather}`)\r\n\r\n    if(!response.ok) {\r\n        throw new Error('Response is not correct to openweather API');\r\n    }\r\n    \r\n    return await response.json();\r\n}\r\n\r\nconst getCoordsByName = async (name: string) => {\r\n    const response = await fetch(`https://api.geoapify.com/v1/geocode/search?text=${name}&apiKey=${apiKeyPosition}`)\r\n\r\n    if(!response.ok) {\r\n        throw new Error('Response is not correct to openweather API');\r\n    }\r\n    \r\n    return await response.json();\r\n}\r\n\r\nexport{\r\n    fetchCurrentWeatherCoords,\r\n    fetchForecastWeatherCoords,\r\n    getCoordsByName,\r\n}","import React, { useState } from 'react';\r\nimport { getCoordsByName } from '../../services';\r\nimport './SearchForm.css';\r\n\r\ninterface ISearchForm{\r\n    color: string\r\n    onHandleForm: () => void,\r\n    onClickItem: (name: string) => void,\r\n}\r\n\r\nconst SearchForm: React.FC<ISearchForm> = ({color, onHandleForm, onClickItem}) =>{\r\n    const [cities, setCities] = useState<any[]>([]);\r\n\r\n    const handleSubmit = (coords: any) => {\r\n        onClickItem(coords);\r\n        onHandleForm();\r\n    }\r\n\r\n    const OnChangeValue = (e: React.FormEvent<HTMLInputElement>) => {\r\n        e.preventDefault();\r\n\r\n        const fetchData = async () => {\r\n            const { features } = await getCoordsByName(e.currentTarget.value);\r\n            setCities(features);\r\n        }\r\n\r\n        if(e.currentTarget.value.length > 2){\r\n            fetchData();\r\n        } \r\n        \r\n        if(e.currentTarget.value.length === 0 || e.currentTarget.value.length < 2) {\r\n            setCities([]);\r\n        }\r\n    }\r\n\r\n    const getCities = (cities: any[]): JSX.Element[] => {\r\n        return cities.map(({properties: {city, lat, lon}}, index)=> {\r\n            return  (\r\n                <li className={`search-item ${color}`} \r\n                    key={index} \r\n                    onClick={() => handleSubmit({lat, lon})}>\r\n                        <span>{city}</span>\r\n                    <i className=\"far fa-chevron-right\"></i>\r\n                </li>\r\n            )\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <input className=\"search-input\" \r\n                    placeholder=\"Search location\" \r\n                    name=\"search\" \r\n                    type=\"text\"\r\n                    autoComplete=\"off\"\r\n                    onChange={(e) => OnChangeValue(e)} />\r\n            <ul className=\"search-list\">\r\n                { getCities(cities) }\r\n            </ul>\r\n            <i className={`far fa-times close ${color}`}  \r\n                onClick={() => onHandleForm()}></i>\r\n        </>\r\n    );\r\n}\r\n\r\nexport { SearchForm };","import React, { useState } from 'react';\r\nimport { WeatherNow } from '../WeatherNow/WeatherNow';\r\nimport { SearchForm } from '../SearchForm';\r\n\r\ninterface IWeatherMain{\r\n    currentWeather: any,\r\n    temperature: string,\r\n    color: string,\r\n    onHandleCoords: () => void,\r\n    onClickItem: (value: any) => void\r\n}\r\n\r\nconst WeatherMain: React.FC<IWeatherMain> = ({currentWeather, temperature, color, onClickItem, onHandleCoords}) => {\r\n    const [form, setForm] = useState<boolean>(true);\r\n\r\n    const onHandleForm = () => {\r\n        setForm(!form); \r\n    }\r\n\r\n    return (\r\n        form ? (\r\n            <WeatherNow currentWeather={currentWeather} \r\n                        temperature={temperature}\r\n                        color={color}\r\n                        onHandleForm={onHandleForm} \r\n                        onHandleCoords={onHandleCoords} /> \r\n        ) : ( \r\n            <SearchForm color={color}\r\n                        onHandleForm={onHandleForm}\r\n                        onClickItem={onClickItem} />\r\n        )\r\n    );\r\n}\r\n\r\nexport {WeatherMain};","import React from 'react';\r\nimport { convertMilliseconds } from '../../helper';\r\nimport './Highlight.css';\r\n\r\ninterface IHighlight{\r\n    highlight: any,\r\n    color: string,\r\n}\r\n\r\nconst Highlight: React.FC<IHighlight> = ({highlight, color}) => {\r\n    return (\r\n        <>\r\n            <h2 className={`description-header ${color}`}>{convertMilliseconds(highlight[0]?.dt, 'long')}</h2>\r\n            <ul className=\"weather-grid\">\r\n                <li className={`weather-grid-item ${color}`}>\r\n                    <p className=\"weather-grid-subtitle\">Wind status</p>\r\n                    <p className=\"weather-grid-title mb0\">{Math.round(highlight[0]?.speed)}<span>mph</span></p>\r\n                    <div className=\"weather-wind\">\r\n                            <img className=\"weather-wind-arrow\" src=\"images/compass.svg\" alt=\"compass\" \r\n                                    style={{transform: `rotate(${highlight[0]?.deg}deg)`}}/> \r\n                    </div>\r\n                </li>\r\n                <li className={`weather-grid-item ${color}`}>\r\n                    <p className=\"weather-grid-subtitle\">Humidity</p>\r\n                    <p className=\"weather-grid-title\">{highlight[0]?.humidity}<span>%</span></p>\r\n                    <div className=\"weather-humidity\">\r\n                        <div className=\"limit\" style={{width: `${highlight[0]?.humidity}%`}}></div>\r\n                        <div className=\"upper\">\r\n                            <span>0%</span>\r\n                            <span>50%</span>\r\n                            <span>100%</span>\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n                <li className={`weather-grid-item ${color}`}>\r\n                    <p className=\"weather-grid-subtitle\">Visibility</p>\r\n                    <p className=\"weather-grid-title\">{Math.round(highlight[0]?.gust || 20)}<span>miles</span></p>\r\n                </li>\r\n                <li className={`weather-grid-item ${color}`}>\r\n                    <p className=\"weather-grid-subtitle\">Air Pressure</p>\r\n                    <p className=\"weather-grid-title\">{highlight[0]?.pressure}<span>mb</span></p>\r\n                </li>\r\n            </ul>\r\n        </>\r\n    );\r\n}\r\n\r\nexport { Highlight };","import React from 'react';\r\nimport { toogleTemp, convertMilliseconds } from '../../helper';\r\nimport './WeatherList.css';\r\n\r\ninterface WeatherListProps{\r\n    temperature: string,\r\n    color: string,\r\n    forecastWeather: any,\r\n    onSetHighlight: (index: number) => void\r\n}\r\n\r\nconst WeatherList: React.FC<WeatherListProps> = ({temperature, color, forecastWeather, onSetHighlight}) => {\r\n    \r\n    const getForecastItems= (forecasts: any[]):JSX.Element[] => {\r\n        return forecasts.map((forecast, index) => {\r\n            const dayTemp = toogleTemp(forecast.temp?.day,temperature);\r\n            const nightTemp = toogleTemp(forecast.temp?.night,temperature);\r\n            \r\n            return (\r\n                <li key={index} className={`weather-item ${color}`} onClick={() => onSetHighlight(index)}>\r\n                    <p className=\"weather-title\">{convertMilliseconds(forecast.dt)}</p>\r\n                    <img className=\"weather-img\" src={`images/${forecast.weather[0].icon}.svg`} alt=\"weather-forecast\"/>\r\n                    <div className=\"weather-tempature\">\r\n                        <span className=\"day\">{dayTemp}</span>\r\n                        <span className=\"night-opacity\">{nightTemp}</span>\r\n                    </div>\r\n                </li>\r\n            );\r\n        })\r\n    }\r\n    \r\n    return (\r\n        <ul className=\"weather-list\">\r\n            { getForecastItems(forecastWeather.list.slice(0,5)) }\r\n        </ul>\r\n    );\r\n}\r\n\r\n\r\nexport { WeatherList };","import React, { useState } from 'react';\r\nimport { Highlight } from '../Highlight';\r\nimport { WeatherList } from '../WeatherList';\r\nimport { filterHighlight } from '../../helper';\r\n\r\ninterface IWeatherDescr{\r\n    forecastWeather: any,\r\n    color: string\r\n    temperature: string\r\n}\r\n\r\nconst WeatherDescr:React.FC<IWeatherDescr> = ({forecastWeather, temperature, color}) => {\r\n    const [highlight, seHighlight] = useState<number>(0);\r\n\r\n    const onSetHighlight = (index: number) => {\r\n        seHighlight(index);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <WeatherList forecastWeather={forecastWeather}\r\n                        temperature={temperature} \r\n                        color={color} \r\n                        onSetHighlight={onSetHighlight} />\r\n            <Highlight highlight={filterHighlight(forecastWeather,highlight)} \r\n                        color={color} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport {WeatherDescr};\r\n\r\n\r\n    \r\n","import React from 'react';  \r\nimport './Spinner.css';\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div className=\"spinner\">\r\n            <div className=\"loadingio-spinner-rolling-ahygq35kjgq\">\r\n                <div className=\"ldio-1kxqfh68oh9\">\r\n                    <div></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport { Spinner };\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { ToogleBtn } from '../ToogleBtn';\r\nimport { WeatherMain } from '../WeatherMain';\r\nimport { WeatherDescr } from '../WeatherDescr';\r\nimport { fetchCurrentWeatherCoords, fetchForecastWeatherCoords } from '../../services';\r\nimport { Spinner } from '../Spinner';\r\nimport './Weather.css';\r\n\r\nconst Weather: React.FC = () => {\r\n    const [isLoading, setLoading] = useState<boolean>(true);\r\n    const [currentWeather, setCurrentWeather] = useState<any>(null);\r\n    const [forecastWeather, setForecastWeather] = useState<any>(null);\r\n    const [temperature, setTemperature] = useState<string>('celcius');\r\n    const [color, setColor] =useState<string>('');\r\n    \r\n    const getCoords = useCallback(() => {\r\n        navigator.geolocation.getCurrentPosition(({coords: {latitude, longitude}}) => {\r\n            const coords = {lat: latitude, lon: longitude};\r\n            fetchData(coords);\r\n        });\r\n    },[]);\r\n    \r\n    useEffect(() => {\r\n        getCoords();\r\n    },[getCoords]);\r\n    \r\n    const fetchData = async (coords: any) => {\r\n        setLoading(true);\r\n        setCurrentWeather( await fetchCurrentWeatherCoords(coords) );\r\n        setForecastWeather( await fetchForecastWeatherCoords(coords) );\r\n        const {dt, sys: {sunrise, sunset}} = (await fetchCurrentWeatherCoords(coords));\r\n        \r\n        if(sunrise > dt || sunset < dt) {\r\n            setColor('night');\r\n        } else {\r\n            setColor('');\r\n        }\r\n\r\n        setLoading(false);\r\n    }\r\n\r\n    const setClickItem = (coords: any) => {\r\n        fetchData(coords);\r\n    }\r\n    \r\n    const setTemperatureContext = (toggleValue: string) => {\r\n        setTemperature(toggleValue);\r\n    }\r\n\r\n    return (\r\n        isLoading ? (\r\n            <Spinner/>\r\n            ) : (\r\n                <div className={`app ${color}`}>\r\n                <div className=\"weather\">\r\n                    <div className={`weather-main ${color}`}>\r\n                        <WeatherMain  \r\n                                currentWeather={currentWeather}\r\n                                color={color} \r\n                                temperature={temperature}\r\n                                onHandleCoords={getCoords}\r\n                                onClickItem={setClickItem} />\r\n                    </div>\r\n                    <div className={`weather-description ${color}`}>\r\n                        <ToogleBtn color={color} \r\n                                    onToggleTemp={setTemperatureContext} />\r\n                        <WeatherDescr forecastWeather={forecastWeather}\r\n                                    temperature={temperature} \r\n                                    color={color} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    );\r\n}\r\n\r\nexport { Weather };","import React from 'react';\r\nimport { Weather } from '../Weather';\r\nimport './App.css';\r\n\r\nconst App: React.FC = () => {\r\n    return (\r\n        <Weather />\r\n    );\r\n}\r\n\r\nexport { App };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/App';\nimport './index.css';\n\nReactDOM.render(\n    <App />, document.getElementById('root')\n);\n"],"sourceRoot":""}