{"version":3,"sources":["components/ToogleBtn/ToogleBtn.tsx","services/index.tsx","helper/index.tsx","components/Spinner/Spinner.tsx","components/WeatherNow/WeatherNow.tsx","components/SearchForm/SearchForm.tsx","components/Highlight/Highlight.tsx","components/WeatherList/WeatherList.tsx","components/WeatherDescr/WeatherDescr.tsx","components/Weather/Weather.tsx","components/App/App.tsx","index.tsx"],"names":["ToogleBtn","OnToggleTemp","useState","celcius","fahrenheit","setActive","activeC","activeF","className","onClick","apiKey","fetchCurrentWeatherCoords","a","lat","lon","fetch","response","ok","Error","json","fetchForecastWeatherCoords","getCoordsByName","name","toogleTemp","value","prop","Math","round","convertMilliseconds","milles","option","date","Date","Intl","DateTimeFormat","weekday","format","day","month","Spinner","WeatherNow","coords","toggleTemp","OnHandleForm","OnHandleCoords","currentWeather","setCurrentWeather","useEffect","fetchData","main","temp","src","weather","icon","alt","substr","length","description","dt","SearchForm","OnClickForm","cities","setCities","getCities","map","index","label","handleSubmit","placeholder","type","autoComplete","onChange","e","preventDefault","currentTarget","data","OnChangeValue","Highlight","forecastWeather","speed","style","transform","deg","humidity","width","gust","pressure","WeatherList","forecasts","OnSetHighlight","list","slice","forecast","night","WeatherDescr","highlight","seHighlight","setForecastWeather","filter","el","filterHighlight","Weather","setCoords","form","setForm","setToggleTemp","navigator","geolocation","getCurrentPosition","latitude","longitude","toggleValue","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9e5314ef.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './ToogleBtn.css';\r\n\r\ninterface ToogleBtnProps{\r\n    OnToggleTemp: (toggleValue: string) => void\r\n}\r\n\r\nconst ToogleBtn: React.FC<ToogleBtnProps> = ({OnToggleTemp}) => {\r\n    const [{celcius, fahrenheit}, setActive] = useState<{celcius: boolean;fahrenheit: boolean;}>({celcius: true, fahrenheit: false});\r\n    \r\n    const activeC = {celcius: true, fahrenheit: false};\r\n    const activeF = {celcius: false, fahrenheit: true};\r\n\r\n    const setCelcius = () => {\r\n        setActive(activeC)\r\n        OnToggleTemp('celcius')\r\n    }\r\n    \r\n    const setFahrenheit = () => {\r\n        setActive(activeF)\r\n        OnToggleTemp('fahrenheit')\r\n    }\r\n    \r\n    return (\r\n        <div className=\"weather-toogle\">\r\n            <button className={`celcius ${celcius && 'active'}`} onClick={() => setCelcius()}>℃</button>\r\n            <button className={`fahrenheit ${fahrenheit && 'active'}`} onClick={() => setFahrenheit()}>℉</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport {ToogleBtn};","\r\nconst apiKey = 'd701466e6f81830ea1596b7e2038a077';\r\n\r\nconst fetchCurrentWeatherCoords = async ({lat, lon}: {lat: number | null,lon: number | null}) => {\r\n    if(lat && lon){\r\n        const response = await fetch(`http://pro.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKey}`)\r\n        \r\n        if(!response.ok){\r\n            throw new Error('Response is not correct to openweather API');\r\n        }\r\n        \r\n        return await response.json();\r\n    }\r\n}\r\n\r\nconst fetchForecastWeatherCoords = async ({lat, lon}: {lat: number | null,lon: number | null}) => {\r\n    if(lat && lon){\r\n        const response = await fetch(`http://pro.openweathermap.org/data/2.5/forecast/daily?lat=${lat}&lon=${lon}&appid=${apiKey}`)\r\n\r\n        if(!response.ok){\r\n            throw new Error('Response is not correct to openweather API');\r\n        }\r\n        \r\n        return await response.json();\r\n    }\r\n}\r\n\r\nconst getCoordsByName = async (name: string) => {\r\n    if(name){\r\n        const response = await fetch(`http://api.positionstack.com/v1/forward?access_key=f59c9e1719d53ed060e3c684ab5bb3f7&query=${name}`)\r\n\r\n        if(!response.ok){\r\n            throw new Error('Response is not correct to openweather API');\r\n        }\r\n        \r\n        return await response.json();\r\n    }\r\n}\r\n\r\nexport{\r\n    fetchCurrentWeatherCoords,\r\n    fetchForecastWeatherCoords,\r\n    getCoordsByName,\r\n}","const toogleTemp = (value: number, prop: string): string => {\r\n    switch(prop){\r\n        case 'celcius':\r\n            value = value - 273.15;\r\n            return `${Math.round(value)}℃`;\r\n        case 'fahrenheit':\r\n            value = ((value - 273.15) * 1.8) + 32;\r\n            return `${Math.round(value)}℉`;\r\n        default: \r\n            return `${Math.round(value)}℃`;\r\n    }\r\n}\r\n\r\nconst convertMilliseconds = (milles: number, option: string = 'short') => {\r\n    const date = new Date(+`${milles}000`);\r\n\r\n    if(option === 'long'){\r\n        return new Intl.DateTimeFormat('en-US', {\r\n            weekday: 'long'\r\n        }).format(date);  \r\n    }\r\n\r\n    return new Intl.DateTimeFormat('en-US', {\r\n                weekday: 'short', day: 'numeric', month: 'short',\r\n    }).format(date);\r\n}\r\n\r\nexport{\r\n    toogleTemp,\r\n    convertMilliseconds\r\n}","import React from 'react';  \r\nimport './Spinner.css';\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div className=\"spinner\">\r\n            <div className=\"loadingio-spinner-rolling-ahygq35kjgq\">\r\n                <div className=\"ldio-1kxqfh68oh9\">\r\n                    <div></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport {Spinner};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { fetchCurrentWeatherCoords } from '../../services';\r\nimport { toogleTemp, convertMilliseconds } from '../../helper';\r\nimport {Spinner} from '../Spinner';\r\nimport './WeatherNow.css';\r\n\r\ninterface WeatherNowProps{\r\n    coords: {\r\n        lat: number | null,\r\n        lon : number | null\r\n    }\r\n    toggleTemp: string,\r\n    OnHandleForm: () => void,\r\n    OnHandleCoords: () => void\r\n}\r\n\r\nconst WeatherNow: React.FC<WeatherNowProps> = ({coords,toggleTemp,OnHandleForm,OnHandleCoords}) => {\r\n    const [currentWeather, setCurrentWeather] = useState<any>(null);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setCurrentWeather(await fetchCurrentWeatherCoords(coords));\r\n        }\r\n        fetchData();\r\n    },[coords]);\r\n\r\n    if(currentWeather) {\r\n        const value = toogleTemp(currentWeather?.main?.temp, toggleTemp);\r\n    \r\n        return (\r\n            <>\r\n                <div className=\"navigation\">\r\n                    <button className=\"navigation-search\" onClick={() => OnHandleForm()}>Search for places</button>\r\n                    <button className=\"navigation-geo\" onClick={() => OnHandleCoords()}><i className=\"fas fa-location\"></i></button>\r\n                </div>\r\n                <div className=\"weather-forecast\">\r\n                    <img src={`images/${currentWeather?.weather[0]?.icon}.svg`} alt=\"weather-forecast\" className=\"forecast-center\"/>\r\n                </div>\r\n                <div className=\"weather-header\">{value.substr(0,value.length - 1)}\r\n                    <span>{value.substr(value.length - 1)}</span>\r\n                </div>\r\n                <div className=\"weather-subheader\">{currentWeather?.weather[0]?.description}</div>\r\n                <div className=\"weather-date\">\r\n                    <span>Today</span>\r\n                    <span className=\"dot\">•</span>\r\n                    <span>{convertMilliseconds(currentWeather?.dt)}</span>\r\n                </div>\r\n                <div className=\"weather-place\">\r\n                    <i className=\"fas fa-map-marker\"></i>\r\n                    {currentWeather?.name}\r\n                </div>\r\n            </>\r\n        );\r\n    } else {\r\n        return <Spinner />\r\n    }\r\n}\r\n\r\nexport {WeatherNow};","import React, { useState } from 'react';\r\nimport { getCoordsByName } from '../../services';\r\nimport './SearchForm.css';\r\n\r\ninterface SearchProps{\r\n    OnHandleForm: () => void,\r\n    OnClickForm: (name: string) => void\r\n}\r\n\r\nconst SearchForm: React.FC<SearchProps> = ({OnHandleForm, OnClickForm}) =>{\r\n    const [cities, setCities] = useState<any[]>([]);\r\n\r\n    const handleSubmit = (label: string) => {\r\n        OnClickForm(label)\r\n        OnHandleForm();\r\n    }\r\n\r\n    const OnChangeValue = (e: React.FormEvent<HTMLInputElement>) => {\r\n        e.preventDefault();\r\n\r\n        const fetchData = async () => {\r\n            setCities(getCities((await getCoordsByName(e.currentTarget.value)).data));\r\n        }\r\n\r\n        if(e.currentTarget.value.length > 2){\r\n            fetchData();\r\n        } \r\n        \r\n        if(e.currentTarget.value.length === 0 || e.currentTarget.value.length < 2) {\r\n            setCities([]);\r\n        }\r\n    }\r\n\r\n    const getCities = (cities: any[]): JSX.Element[] => {\r\n        return cities.map(({label}, index)=> {\r\n            return  (\r\n                <li className=\"search-item\" key={index} onClick={() => handleSubmit(label)}>\r\n                    <span>{label}</span>\r\n                    <i className=\"far fa-chevron-right\"></i>\r\n                </li>\r\n            )\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <input className=\"search-input\" \r\n                    placeholder=\"Search location\" \r\n                    name=\"search\" \r\n                    type=\"text\"\r\n                    autoComplete=\"off\"\r\n                    onChange={(e) => OnChangeValue(e)} />\r\n            <ul className=\"search-list\">\r\n                {cities}\r\n            </ul>\r\n            <i className=\"far fa-times close\"  onClick={() => OnHandleForm()}></i>\r\n        </>\r\n    );\r\n}\r\n\r\nexport {SearchForm};","import React from 'react';\r\nimport { convertMilliseconds } from '../../helper';\r\nimport './Highlight.css';\r\n\r\ninterface HighlightProps{\r\n    forecastWeather: any\r\n}\r\n\r\nconst Highlight: React.FC<HighlightProps> = ({forecastWeather}) => {\r\n    return (\r\n        <>\r\n            <h2 className=\"description-header\">{convertMilliseconds(forecastWeather[0]?.dt, 'long')}</h2>\r\n            <ul className=\"weather-grid\">\r\n                <li className=\"weather-grid-item\">\r\n                    <p className=\"weather-grid-subtitle\">Wind status</p>\r\n                    <p className=\"weather-grid-title\">{Math.round(forecastWeather[0]?.speed)}<span>mph</span></p>\r\n                    <div className=\"weather-wind\">\r\n                            <img className=\"weather-wind-arrow\" src=\"images/compass.svg\" alt=\"compass\" style={{transform: `rotate(${forecastWeather[0]?.deg}deg)`}}/> \r\n                    </div>\r\n                </li>\r\n                <li className=\"weather-grid-item\">\r\n                    <p className=\"weather-grid-subtitle\">Humidity</p>\r\n                    <p className=\"weather-grid-title\">{forecastWeather[0]?.humidity}<span>%</span></p>\r\n                    <div className=\"weather-humidity\">\r\n                        <div className=\"limit\" style={{width: `${forecastWeather[0]?.humidity}%`}}></div>\r\n                        <div className=\"upper\">\r\n                            <span>0%</span>\r\n                            <span>50%</span>\r\n                            <span>100%</span>\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n                <li className=\"weather-grid-item\">\r\n                    <p className=\"weather-grid-subtitle\">Visibility</p>\r\n                    <p className=\"weather-grid-title\">{Math.round(forecastWeather[0]?.gust || 20)}<span>miles</span></p>\r\n                </li>\r\n                <li className=\"weather-grid-item\">\r\n                    <p className=\"weather-grid-subtitle\">Air Pressure</p>\r\n                    <p className=\"weather-grid-title\">{forecastWeather[0]?.pressure}<span>mb</span></p>\r\n                </li>\r\n            </ul>\r\n        </>\r\n    );\r\n}\r\n\r\nexport {Highlight};","import React from 'react';\r\nimport { toogleTemp, convertMilliseconds } from '../../helper';\r\nimport './WeatherList.css';\r\n\r\ninterface WeatherListProps{\r\n    toggleTemp: string,\r\n    forecastWeather: any,\r\n    OnSetHighlight: (index: number) => void\r\n}\r\n\r\nconst WeatherList: React.FC<WeatherListProps> = ({toggleTemp, forecastWeather, OnSetHighlight}) => {\r\n    \r\n    const getForecastItems= (forecasts: any[]):JSX.Element[] => {\r\n        return forecasts?.map((forecast, index) => {\r\n            return (\r\n                <li key={index} className=\"weather-item\" onClick={() => OnSetHighlight(index)}>\r\n                    <p className=\"weather-title\">{convertMilliseconds(forecast?.dt)}</p>\r\n                    <img className=\"weather-img\" src={`images/${forecast?.weather[0].icon}.svg`} alt=\"weather-forecast\"/>\r\n                    <div className=\"weather-tempature\">\r\n                        <span className=\"day\">{toogleTemp(forecast?.temp?.day,toggleTemp)}</span>\r\n                        <span className=\"night\">{toogleTemp(forecast?.temp?.night,toggleTemp)}</span>\r\n                    </div>\r\n                </li>\r\n            );\r\n        })\r\n    }\r\n    \r\n    return (\r\n        <ul className=\"weather-list\">\r\n            {getForecastItems(forecastWeather?.list?.slice(0,5))}\r\n        </ul>\r\n    );\r\n}\r\n\r\n\r\nexport {WeatherList};","import React, { useEffect, useState } from 'react';\r\nimport { fetchForecastWeatherCoords } from '../../services';\r\nimport {Highlight} from '../Highlight';\r\nimport {WeatherList} from '../WeatherList';\r\nimport {Spinner} from '../Spinner';\r\n\r\ninterface WeatherDescrProps{\r\n    coords: {\r\n        lat: number | null,\r\n        lon : number | null\r\n    },\r\n    toggleTemp: string\r\n}\r\n\r\nconst WeatherDescr:React.FC<WeatherDescrProps> = ({coords, toggleTemp}) => {\r\n    const [highlight, seHighlight] = useState<number>(0);\r\n    const [forecastWeather, setForecastWeather] = useState<any>(null);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setForecastWeather(await fetchForecastWeatherCoords(coords));\r\n        }\r\n        fetchData();\r\n    },[coords]);\r\n\r\n    const OnSetHighlight = (index: number) => {\r\n        seHighlight(index);\r\n    }\r\n    \r\n    const filterHighlight = (forecastWeather: any,highlight: number): any => {\r\n        return forecastWeather?.list.filter((el: any, index: number ) => index === highlight);\r\n    }\r\n\r\n    if(forecastWeather){\r\n        return (\r\n            <>\r\n                <WeatherList toggleTemp={toggleTemp} forecastWeather={forecastWeather} OnSetHighlight={OnSetHighlight}/>\r\n                <Highlight forecastWeather={filterHighlight(forecastWeather,highlight)}/>\r\n            </>\r\n        );\r\n    } else {\r\n        return <Spinner />\r\n    }\r\n}\r\n\r\nexport {WeatherDescr};\r\n\r\n\r\n    \r\n","import React, { useEffect, useState } from 'react';\r\nimport {ToogleBtn} from '../ToogleBtn';\r\nimport {WeatherNow} from '../WeatherNow';\r\nimport {SearchForm} from '../SearchForm';\r\nimport {WeatherDescr} from '../WeatherDescr';\r\nimport { getCoordsByName } from '../../services';\r\nimport './Weather.css';\r\n\r\nconst Weather: React.FC = () => {\r\n    const [coords, setCoords] = useState<{lat: number | null, lon:number | null}>({lat: null, lon: null});\r\n    const [form, setForm] = useState<boolean>(true);\r\n    const [toggleTemp, setToggleTemp] = useState<string>('celcius');\r\n\r\n    useEffect(() => {\r\n        OnHandleCoords()\r\n    },[]);\r\n\r\n    const OnHandleCoords = () => {\r\n        navigator.geolocation.getCurrentPosition(({coords: {latitude, longitude}}) => {\r\n            setCoords({lat: latitude, lon: longitude});\r\n        });\r\n    }\r\n\r\n    const OnHandleForm = () => {\r\n        setForm(!form); \r\n    }\r\n\r\n    const OnToggleTemp = (toggleValue: string) => {\r\n        setToggleTemp(toggleValue);\r\n    }\r\n\r\n    const OnClickForm = (name: string) => {\r\n        const fetchData = async () => {\r\n            const {latitude, longitude} = (await getCoordsByName(name)).data[0];\r\n            setCoords( {lat: latitude, lon: longitude});\r\n        }\r\n        fetchData();\r\n    }\r\n\r\n    return (\r\n        <div className=\"weather\">\r\n            <div className=\"weather-main\">\r\n                {form ? <WeatherNow \r\n                            coords={coords} \r\n                            toggleTemp={toggleTemp}\r\n                            OnHandleForm={OnHandleForm} \r\n                            OnHandleCoords={OnHandleCoords} /> \r\n                      : <SearchForm OnHandleForm={OnHandleForm}\r\n                                    OnClickForm={OnClickForm}/>}\r\n            </div>\r\n            <div className=\"weather-description\">\r\n                <ToogleBtn OnToggleTemp={OnToggleTemp} />\r\n                <WeatherDescr coords={coords} toggleTemp={toggleTemp} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport { Weather };","import React from 'react';\r\nimport {Weather} from '../Weather';\r\nimport './App.css';\r\n\r\nconst App: React.FC = () => {\r\n    return (\r\n        <div className=\"app\">\r\n            <div className=\"app-container\">\r\n                <Weather />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport {App};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './components/App';\nimport './index.css';\n\nReactDOM.render(\n    <App />, document.getElementById('root')\n);\n"],"sourceRoot":""}