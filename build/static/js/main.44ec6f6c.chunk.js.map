{"version":3,"sources":["components/ToogleBtn/ToogleBtn.tsx","services/index.tsx","helper/index.tsx","components/Spinner/Spinner.tsx","components/WeatherNow/WeatherNow.tsx","components/SearchForm/SearchForm.tsx","components/Highlight/Highlight.tsx","components/WeatherList/WeatherList.tsx","components/WeatherWrapper/WeatherWrapper.tsx","components/Weather/Weather.tsx","components/App/App.tsx","index.tsx"],"names":["ToogleBtn","OnToggleTemp","useState","celcius","fahrenheit","setActive","activeC","activeF","className","onClick","apiKeyWeather","fetchCurrentWeatherCoords","a","lat","lon","fetch","response","ok","Error","json","fetchForecastWeatherCoords","getCoordsByName","name","toogleTemp","value","prop","Math","round","convertMilliseconds","milles","option","date","Date","Intl","DateTimeFormat","weekday","format","day","month","filterHighlight","forecastWeather","highlight","list","filter","el","index","Spinner","WeatherNow","coords","toggleTemp","OnHandleForm","OnHandleCoords","currentWeather","setCurrentWeather","useEffect","fetchData","main","temp","src","weather","icon","alt","substr","length","description","dt","SearchForm","OnClickForm","cities","setCities","placeholder","type","autoComplete","onChange","e","preventDefault","currentTarget","features","OnChangeValue","map","properties","city","getCities","Highlight","speed","style","transform","deg","humidity","width","gust","pressure","WeatherList","forecasts","OnSetHighlight","slice","forecast","night","WeatherWrapper","seHighlight","setForecastWeather","Weather","setCoords","form","setForm","setToggleTemp","navigator","geolocation","getCurrentPosition","latitude","longitude","toggleValue","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.44ec6f6c.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './ToogleBtn.css';\r\n\r\ninterface ToogleBtnProps{\r\n    OnToggleTemp: (toggleValue: string) => void\r\n}\r\n\r\nconst ToogleBtn: React.FC<ToogleBtnProps> = ({OnToggleTemp}) => {\r\n    const [{celcius, fahrenheit}, setActive] = useState<{celcius: boolean;fahrenheit: boolean;}>({celcius: true, fahrenheit: false});\r\n    \r\n    const activeC = {celcius: true, fahrenheit: false};\r\n    const activeF = {celcius: false, fahrenheit: true};\r\n\r\n    const setCelcius = () => {\r\n        setActive(activeC)\r\n        OnToggleTemp('celcius')\r\n    }\r\n    \r\n    const setFahrenheit = () => {\r\n        setActive(activeF)\r\n        OnToggleTemp('fahrenheit')\r\n    }\r\n    \r\n    return (\r\n        <div className=\"weather-toogle\">\r\n            <button className={`celcius ${celcius && 'active'}`} onClick={() => setCelcius()}>℃</button>\r\n            <button className={`fahrenheit ${fahrenheit && 'active'}`} onClick={() => setFahrenheit()}>℉</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport {ToogleBtn};","\r\nconst apiKeyWeather = 'd701466e6f81830ea1596b7e2038a077';\r\nconst apiKeyPosition = 'fbc13c10bd85447d8b05a6fd4f167c9a';\r\n\r\nconst fetchCurrentWeatherCoords = async ({lat, lon}: {lat: number | null,lon: number | null}) => {\r\n    if(lat && lon){\r\n        const response = await fetch(`http://pro.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKeyWeather}`)\r\n        \r\n        if(!response.ok){\r\n            throw new Error('Response is not correct to openweather API');\r\n        }\r\n        \r\n        return await response.json();\r\n    }\r\n}\r\n\r\nconst fetchForecastWeatherCoords = async ({lat, lon}: {lat: number | null,lon: number | null}) => {\r\n    if(lat && lon){\r\n        const response = await fetch(`http://pro.openweathermap.org/data/2.5/forecast/daily?lat=${lat}&lon=${lon}&appid=${apiKeyWeather}`)\r\n\r\n        if(!response.ok){\r\n            throw new Error('Response is not correct to openweather API');\r\n        }\r\n        \r\n        return await response.json();\r\n    }\r\n}\r\n\r\nconst getCoordsByName = async (name: string) => {\r\n    if(name){\r\n        const response = await fetch(`https://api.geoapify.com/v1/geocode/search?text=${name}&apiKey=${apiKeyPosition}`)\r\n\r\n        if(!response.ok){\r\n            throw new Error('Response is not correct to openweather API');\r\n        }\r\n        \r\n        return await response.json();\r\n    }\r\n}\r\n\r\nexport{\r\n    fetchCurrentWeatherCoords,\r\n    fetchForecastWeatherCoords,\r\n    getCoordsByName,\r\n}","const toogleTemp = (value: number, prop: string): string => {\r\n    switch(prop){\r\n        case 'celcius':\r\n            value = value - 273.15;\r\n            return `${Math.round(value)}℃`;\r\n        case 'fahrenheit':\r\n            value = ((value - 273.15) * 1.8) + 32;\r\n            return `${Math.round(value)}℉`;\r\n        default: \r\n            return `${Math.round(value)}℃`;\r\n    }\r\n}\r\n\r\nconst convertMilliseconds = (milles: number, option: string = 'short') => {\r\n    const date = new Date(+`${milles}000`);\r\n\r\n    if(option === 'long'){\r\n        return new Intl.DateTimeFormat('en-US', {\r\n            weekday: 'long'\r\n        }).format(date);  \r\n    }\r\n\r\n    return new Intl.DateTimeFormat('en-US', {\r\n                weekday: 'short', day: 'numeric', month: 'short',\r\n    }).format(date);\r\n}\r\n\r\nconst filterHighlight = (forecastWeather: any,highlight: number): any => {\r\n    return forecastWeather?.list.filter((el: any, index: number ) => index === highlight);\r\n}\r\n\r\nexport{\r\n    filterHighlight,\r\n    toogleTemp,\r\n    convertMilliseconds\r\n}","import React from 'react';  \r\nimport './Spinner.css';\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div className=\"spinner\">\r\n            <div className=\"loadingio-spinner-rolling-ahygq35kjgq\">\r\n                <div className=\"ldio-1kxqfh68oh9\">\r\n                    <div></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport {Spinner};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { fetchCurrentWeatherCoords } from '../../services';\r\nimport { toogleTemp, convertMilliseconds } from '../../helper';\r\nimport {Spinner} from '../Spinner';\r\nimport './WeatherNow.css';\r\n\r\ninterface WeatherNowProps{\r\n    coords: {\r\n        lat: number | null,\r\n        lon : number | null\r\n    }\r\n    toggleTemp: string,\r\n    OnHandleForm: () => void,\r\n    OnHandleCoords: () => void\r\n}\r\n\r\nconst WeatherNow: React.FC<WeatherNowProps> = ({coords,toggleTemp,OnHandleForm,OnHandleCoords}) => {\r\n    const [currentWeather, setCurrentWeather] = useState<any>(null);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setCurrentWeather(await fetchCurrentWeatherCoords(coords));\r\n        }\r\n        fetchData();\r\n    },[coords]);\r\n\r\n    let value: string = '';\r\n\r\n    if(currentWeather){\r\n        value = toogleTemp(currentWeather?.main?.temp, toggleTemp);\r\n    }\r\n    \r\n    return (\r\n        currentWeather ? (\r\n            <>\r\n                <div className=\"navigation\">\r\n                    <button className=\"navigation-search\" onClick={() => OnHandleForm()}>Search for places</button>\r\n                    <button className=\"navigation-geo\" onClick={() => OnHandleCoords()}><i className=\"fas fa-location\"></i></button>\r\n                </div>\r\n                <div className=\"weather-forecast\">\r\n                    <img src={`images/${currentWeather?.weather[0]?.icon}.svg`} alt=\"weather-forecast\" className=\"forecast-center\"/>\r\n                </div>\r\n                <div className=\"weather-header\">{value.substr(0,value.length - 1)}\r\n                    <span>{value.substr(value.length - 1)}</span>\r\n                </div>\r\n                <div className=\"weather-subheader\">{currentWeather?.weather[0]?.description}</div>\r\n                <div className=\"weather-date\">\r\n                    <span>Today</span>\r\n                    <span className=\"dot\">•</span>\r\n                    <span>{convertMilliseconds(currentWeather?.dt)}</span>\r\n                </div>\r\n                <div className=\"weather-place\">\r\n                    <i className=\"fas fa-map-marker\"></i>\r\n                    {currentWeather?.name}\r\n                </div>\r\n            </>\r\n        ) : <Spinner /> \r\n    );\r\n}\r\n\r\nexport {WeatherNow};","import React, { useState } from 'react';\r\nimport { getCoordsByName } from '../../services';\r\nimport './SearchForm.css';\r\n\r\ninterface SearchProps{\r\n    OnHandleForm: () => void,\r\n    OnClickForm: (name: string) => void\r\n}\r\n\r\nconst SearchForm: React.FC<SearchProps> = ({OnHandleForm, OnClickForm}) =>{\r\n    const [cities, setCities] = useState<any[]>([]);\r\n\r\n    const handleSubmit = (coords: any) => {\r\n        OnClickForm(coords);\r\n        OnHandleForm();\r\n    }\r\n\r\n    const OnChangeValue = (e: React.FormEvent<HTMLInputElement>) => {\r\n        e.preventDefault();\r\n\r\n        const fetchData = async () => {\r\n          const {features} = await getCoordsByName(e.currentTarget.value);\r\n          setCities(features);\r\n        }\r\n\r\n        if(e.currentTarget.value.length > 2){\r\n            fetchData();\r\n        } \r\n        \r\n        if(e.currentTarget.value.length === 0 || e.currentTarget.value.length < 2) {\r\n            setCities([]);\r\n        }\r\n    }\r\n\r\n    const getCities = (cities: any[]): JSX.Element[] => {\r\n        return cities.map(({properties: {city, lat, lon}}, index)=> {\r\n            return  (\r\n                <li className=\"search-item\" key={index} onClick={() => handleSubmit({lat, lon})}>\r\n                    <span>{city}</span>\r\n                    <i className=\"far fa-chevron-right\"></i>\r\n                </li>\r\n            )\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <input className=\"search-input\" \r\n                    placeholder=\"Search location\" \r\n                    name=\"search\" \r\n                    type=\"text\"\r\n                    autoComplete=\"off\"\r\n                    onChange={(e) => OnChangeValue(e)} />\r\n            <ul className=\"search-list\">\r\n                {getCities(cities)}\r\n            </ul>\r\n            <i className=\"far fa-times close\"  onClick={() => OnHandleForm()}></i>\r\n        </>\r\n    );\r\n}\r\n\r\nexport {SearchForm};","import React from 'react';\r\nimport { convertMilliseconds } from '../../helper';\r\nimport './Highlight.css';\r\n\r\ninterface HighlightProps{\r\n    forecastWeather: any\r\n}\r\n\r\nconst Highlight: React.FC<HighlightProps> = ({forecastWeather}) => {\r\n    return (\r\n        <>\r\n            <h2 className=\"description-header\">{convertMilliseconds(forecastWeather[0]?.dt, 'long')}</h2>\r\n            <ul className=\"weather-grid\">\r\n                <li className=\"weather-grid-item\">\r\n                    <p className=\"weather-grid-subtitle\">Wind status</p>\r\n                    <p className=\"weather-grid-title\">{Math.round(forecastWeather[0]?.speed)}<span>mph</span></p>\r\n                    <div className=\"weather-wind\">\r\n                            <img className=\"weather-wind-arrow\" src=\"images/compass.svg\" alt=\"compass\" style={{transform: `rotate(${forecastWeather[0]?.deg}deg)`}}/> \r\n                    </div>\r\n                </li>\r\n                <li className=\"weather-grid-item\">\r\n                    <p className=\"weather-grid-subtitle\">Humidity</p>\r\n                    <p className=\"weather-grid-title\">{forecastWeather[0]?.humidity}<span>%</span></p>\r\n                    <div className=\"weather-humidity\">\r\n                        <div className=\"limit\" style={{width: `${forecastWeather[0]?.humidity}%`}}></div>\r\n                        <div className=\"upper\">\r\n                            <span>0%</span>\r\n                            <span>50%</span>\r\n                            <span>100%</span>\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n                <li className=\"weather-grid-item\">\r\n                    <p className=\"weather-grid-subtitle\">Visibility</p>\r\n                    <p className=\"weather-grid-title\">{Math.round(forecastWeather[0]?.gust || 20)}<span>miles</span></p>\r\n                </li>\r\n                <li className=\"weather-grid-item\">\r\n                    <p className=\"weather-grid-subtitle\">Air Pressure</p>\r\n                    <p className=\"weather-grid-title\">{forecastWeather[0]?.pressure}<span>mb</span></p>\r\n                </li>\r\n            </ul>\r\n        </>\r\n    );\r\n}\r\n\r\nexport {Highlight};","import React from 'react';\r\nimport { toogleTemp, convertMilliseconds } from '../../helper';\r\nimport './WeatherList.css';\r\n\r\ninterface WeatherListProps{\r\n    toggleTemp: string,\r\n    forecastWeather: any,\r\n    OnSetHighlight: (index: number) => void\r\n}\r\n\r\nconst WeatherList: React.FC<WeatherListProps> = ({toggleTemp, forecastWeather, OnSetHighlight}) => {\r\n    \r\n    const getForecastItems= (forecasts: any[]):JSX.Element[] => {\r\n        return forecasts?.map((forecast, index) => {\r\n            return (\r\n                <li key={index} className=\"weather-item\" onClick={() => OnSetHighlight(index)}>\r\n                    <p className=\"weather-title\">{convertMilliseconds(forecast?.dt)}</p>\r\n                    <img className=\"weather-img\" src={`images/${forecast?.weather[0].icon}.svg`} alt=\"weather-forecast\"/>\r\n                    <div className=\"weather-tempature\">\r\n                        <span className=\"day\">{toogleTemp(forecast?.temp?.day,toggleTemp)}</span>\r\n                        <span className=\"night\">{toogleTemp(forecast?.temp?.night,toggleTemp)}</span>\r\n                    </div>\r\n                </li>\r\n            );\r\n        })\r\n    }\r\n    \r\n    return (\r\n        <ul className=\"weather-list\">\r\n            {getForecastItems(forecastWeather?.list?.slice(0,5))}\r\n        </ul>\r\n    );\r\n}\r\n\r\n\r\nexport {WeatherList};","import React, { useEffect, useState } from 'react';\r\nimport { fetchForecastWeatherCoords } from '../../services';\r\nimport {Highlight} from '../Highlight';\r\nimport {WeatherList} from '../WeatherList';\r\nimport {Spinner} from '../Spinner';\r\nimport { filterHighlight } from '../../helper';\r\n\r\ninterface WeatherWrapperProps{\r\n    coords: {\r\n        lat: number | null,\r\n        lon : number | null\r\n    },\r\n    toggleTemp: string\r\n}\r\n\r\nconst WeatherWrapper:React.FC<WeatherWrapperProps> = ({coords, toggleTemp}) => {\r\n    const [highlight, seHighlight] = useState<number>(0);\r\n    const [forecastWeather, setForecastWeather] = useState<any>(null);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setForecastWeather(await fetchForecastWeatherCoords(coords));\r\n        }\r\n        fetchData();\r\n    },[coords]);\r\n\r\n    const OnSetHighlight = (index: number) => {\r\n        seHighlight(index);\r\n    }\r\n\r\n    return (\r\n        forecastWeather ? (\r\n            <>\r\n                <WeatherList toggleTemp={toggleTemp} forecastWeather={forecastWeather} OnSetHighlight={OnSetHighlight}/>\r\n                <Highlight forecastWeather={filterHighlight(forecastWeather,highlight)}/>\r\n            </>\r\n        ) : <Spinner /> \r\n    );\r\n}\r\n\r\nexport {WeatherWrapper};\r\n\r\n\r\n    \r\n","import React, { useEffect, useState } from 'react';\r\nimport {ToogleBtn} from '../ToogleBtn';\r\nimport {WeatherNow} from '../WeatherNow';\r\nimport {SearchForm} from '../SearchForm';\r\nimport {WeatherWrapper} from '../WeatherWrapper';\r\nimport { getCoordsByName } from '../../services';\r\nimport './Weather.css';\r\n\r\nconst Weather: React.FC = () => {\r\n    const [coords, setCoords] = useState<{lat: number | null, lon:number | null}>({lat: null, lon: null});\r\n    const [form, setForm] = useState<boolean>(true);\r\n    const [toggleTemp, setToggleTemp] = useState<string>('celcius');\r\n\r\n    useEffect(() => {\r\n        OnHandleCoords()\r\n    },[]);\r\n\r\n    const OnHandleCoords = () => {\r\n        navigator.geolocation.getCurrentPosition(({coords: {latitude, longitude}}) => {\r\n            setCoords({lat: latitude, lon: longitude});\r\n        });\r\n    }\r\n\r\n    const OnHandleForm = () => {\r\n        setForm(!form); \r\n    }\r\n\r\n    const OnToggleTemp = (toggleValue: string) => {\r\n        setToggleTemp(toggleValue);\r\n    }\r\n\r\n    const OnClickForm = (coords: any) => {\r\n        setCoords(coords);\r\n    }\r\n\r\n    return (\r\n        <div className=\"weather\">\r\n            <div className=\"weather-main\">\r\n                { \r\n                    form ? (\r\n                        <WeatherNow coords={coords} \r\n                            toggleTemp={toggleTemp}\r\n                            OnHandleForm={OnHandleForm} \r\n                            OnHandleCoords={OnHandleCoords} /> \r\n                    )\r\n                    : <SearchForm OnHandleForm={OnHandleForm}\r\n                                  OnClickForm={OnClickForm} />\r\n                }\r\n            </div>\r\n            <div className=\"weather-description\">\r\n                <ToogleBtn OnToggleTemp={OnToggleTemp} />\r\n                <WeatherWrapper coords={coords} toggleTemp={toggleTemp} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport { Weather };","import React from 'react';\r\nimport {Weather} from '../Weather';\r\nimport './App.css';\r\n\r\nconst App: React.FC = () => {\r\n    return (\r\n        <div className=\"app\">\r\n            <div className=\"app-container\">\r\n                <Weather />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport {App};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './components/App';\nimport './index.css';\n\nReactDOM.render(\n    <App />, document.getElementById('root')\n);\n"],"sourceRoot":""}